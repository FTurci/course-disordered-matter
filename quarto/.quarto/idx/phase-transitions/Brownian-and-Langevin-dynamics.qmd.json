{"title":"The Langevin Approach","markdown":{"headingText":"The Langevin Approach","containsRefs":false,"markdown":"\n## The Random Walk and the Langevin equation\n\nThe concept of a random walk and its continuum limit — diffusion — introduced in the previous chapter, expresses the time evolution of the probability distribution $p(x, t)$ for a particle's position $x$ is described by the diffusion equation:\n\n$$\n\\frac{\\partial p}{\\partial t} = D \\frac{\\partial^2 p}{\\partial x^2},\n$$\n\nwhich is a standard example of a so called *Fokker-Planck* equation, which is second-order in space and first-order in time.\n\nIn contrast, the *Langevin equation* provides a stochastic differential equation for the particle’s trajectory $x(t)$. \nTo understand it, consider the motion over a small time increment $\\Delta t$:\n\n$$\nx(t + \\Delta t) = x(t) + \\Delta x(t)\n$$\n\nHere, $\\Delta x(t)$ is a random displacement. If the lattice spacing is $a$, we define the step statistics as:\n\n$$\n\\Delta x(t) = \n\\begin{cases}\n+a & \\text{with probability } \\nu \\Delta t \\\\\n-a & \\text{with probability } \\nu \\Delta t \\\\\n0 & \\text{with probability } 1 - 2\\nu \\Delta t\n\\end{cases}\n$$\n\nThis defines a discrete-time, discrete-space random walk. The average and variance of the step are:\n\n* Mean: $\\langle \\Delta x \\rangle = 0$\n\n* Variance: $\\langle (\\Delta x)^2 \\rangle = 2 a^2 \\nu \\Delta t = 2D \\Delta t$\n\nThe steps $\\Delta x(t)$ are uncorrelated across time.\n\nTo take the continuum limit, we let both $a \\to 0$ and $\\Delta t \\to 0$ in such a way that:\n\n$$\na \\propto \\sqrt{\\Delta t}\n$$\n\nIn this limit, we obtain the **Langevin equation**:\n\n$$\n\\dot{x}(t) = \\eta(t)\n$$\n\nwhere $\\eta(t)$ is a stochastic force (noise) satisfying:\n\n$$\n\\langle \\eta(t) \\rangle = 0\n$$\n\n$$\n\\langle \\eta(t) \\eta(t') \\rangle = \\Gamma \\delta(t - t')\n$$\n\nThis $\\eta(t)$ is known as white noise — it has zero mean and is uncorrelated at different times.\n\nThe Langevin equation tells us that the velocity $\\dot{x}(t)$ is purely driven by noise. We can formally integrate it:\n\n$$\nx(t) - x_0 = \\int_0^t \\eta(t')\\, dt'\n$$\n\nTaking ensemble averages:\n\n* Mean displacement:\n  $$\n  \\langle x(t) - x_0 \\rangle = 0\n  $$\n\n* Mean square displacement:\n  $$\n  \\langle [x(t) - x_0]^2 \\rangle = \\int_0^t \\int_0^t \\langle \\eta(t') \\eta(t'') \\rangle\\, dt'\\, dt'' = \\Gamma \\int_0^t dt' = \\Gamma t\n  $$\n\nComparing this with the diffusion equation result, we identify:\n\n$$\n\\Gamma = 2D\n$$\n\nHence, the Langevin description yields the same physical behavior — not just the mean-square displacement but also the full probability distribution $p(x, t)$ — as the diffusion (Fokker-Planck) equation. This equivalence arises from the fact that the integral of many small, independent random steps leads to a Gaussian distribution, in agreement with the solution of the diffusion equation.\n\nFor more details, see: *Stochastic Processes in Physics and Chemistry* by N.G. van Kampen (North Holland, 1981).\n\n## Brownian Motion\n\nLet us now examine Brownian motion, originally observed as the erratic motion of colloidal particles suspended in a fluid. These particles undergo constant collisions with surrounding (smaller) fluid molecules, which results in seemingly random movement.\n\nFrom a coarse-grained perspective — where we do not track each individual collision — this appears as motion under random forces. This statistical treatment introduces irreversibility at the macroscopic level, even though the underlying molecular dynamics are reversible.\n\nThe Langevin equation provides a way to model this behavior. For a particle of mass $m$ in one dimension, Langevin proposed the equation:\n\n$$\nm \\ddot{x} = -\\gamma \\dot{x} + f(t)\n$$\n\nHere:\n\n* $-\\gamma \\dot{x}$ is a frictional damping force, where $\\gamma$ is the damping coefficient.\n* $f(t)$ is a random force due to molecular collisions.\n\n> Often, the mobility is defined as $\\mu = 1/\\gamma$ — note that this is unrelated to chemical potential.\n\n\n### Noise Properties\n\nIn principle the random forces are \\textit{correlated} in time since the molecular collisions which cause them are correlated and have some definite duration. \n\n\nLet us assume that there is some correlation time $t_c$ over which $\\langle f(t_1) f(t_2) \\rangle = g(t_1 - t_2)$ decays rapidly as shown in the sketch:\n\n![Sketch of $g(t1−t2)$ against $|t1− t2|$](Figs/autocorrelate.png){#fig-autocorrelate\nwidth=60%} \n\nThen as long as we consider timescales $\\gg t_c$ we can safely replace $g(t_1 - t_2)$ by a delta function. Thus  we can approximate the noise by\n\n$$\n\\langle f(t) \\rangle = 0\n$$\n\n$$\n\\langle f(t_1) f(t_2) \\rangle = \\Gamma \\delta(t_1 - t_2)\n$$\n\nSuch uncorrelated noise is known as \"white noise\".\n\n### Solving the Langevin Equation (Velocity)\n\nLet’s set $m = 1$ for simplicity and solve the equation:\n\n$$\n\\dot{v} + \\gamma v = f(t)\n$$\n\nWe apply an integrating factor:\n\n$$\n\\frac{d}{dt} \\left[ v e^{\\gamma t} \\right] = e^{\\gamma t} f(t)\n$$\n\nIntegrating both sides:\n\n$$\nv(t) = v_0 e^{-\\gamma t} + \\int_0^t e^{-\\gamma (t - t')} f(t')\\, dt'\n$$\n\nTaking the average:\n\n$$\n\\langle v(t) \\rangle = v_0 e^{-\\gamma t}\n$$\n\nThus:\n\n* At short times: ($\\gamma t \\ll 1$): $\\langle v \\rangle \\approx v_0$ ie. friction is negligible.\n* At long times: ($\\gamma t \\gg 1$): $\\langle v \\rangle \\to 0$ ie. the system loses memory of the initial velocity.\n\n\n### Mean-Square Velocity\n\nWe now compute:\n\n$$\n\\langle v(t)^2 \\rangle = v_0^2 e^{-2\\gamma t} + \\Gamma \\int_0^t e^{-2\\gamma (t - t')} dt' = v_0^2 e^{-2\\gamma t} + \\frac{\\Gamma}{2\\gamma} \\left(1 - e^{-2\\gamma t} \\right)\n$$\n\nImplying that at\n\n* Short times: $\\langle v^2 \\rangle \\approx v_0^2$\n* Long times: $\\langle v^2 \\rangle \\to \\Gamma / (2\\gamma)$\n\nAt equilibrium, the equipartition theorem gives:\n\n$$\n\\frac{1}{2} m \\langle v^2 \\rangle = \\frac{1}{2} k_B T\n$$\n\nUsing this to identify $\\Gamma$:\n\n$$\n\\Gamma = 2 \\gamma k_B T\n$$\n\nThis important result relates the noise strength to the damping and temperature — they have the same microscopic origin (molecular collisions).\n\n\n### Mean-Square Displacement\n\nWe now integrate $v(t)$ again to get position $x(t)$ (with $m = 1$):\n\nUsing the result above and substituting $\\Gamma = 2\\gamma k_B T$, we find:\n\n$$\n\\langle [x(t) - x_0]^2 \\rangle = \\frac{(v_0^2 - k_B T)}{\\gamma^2} (1 - e^{-\\gamma t})^2 + \\frac{2 k_B T}{\\gamma} \\left[ t - \\frac{1 - e^{-\\gamma t}}{\\gamma} \\right]\n$$\n\nLimiting behaviors:\n\n* Short times: ($\\gamma t \\ll 1$):\n\n  $$\n  \\langle [x(t) - x_0]^2 \\rangle \\approx v_0^2 t^2\n  $$\n\n  (correspinding to *ballistic* motion)\n\n* Long time ($\\gamma t \\gg 1$): \n\n  $$\n  \\langle [x(t) - x_0]^2 \\rangle \\approx \\frac{2 k_B T}{\\gamma} t\n  $$\n\n  (corresponding to *diffusive motion*)\n\nThe effective diffusion constant is:\n\n$$\nD = \\frac{k_B T}{\\gamma}\n$$\n\nThis is the **Einstein relation**, connecting the rate of diffusion to temperature and damping.\n It is useful as it allows an explicit expression for the diffusion\nconstant if one knows $\\gamma$. A famous example is a sphere: the equation for fluid flow past a moving\nsphere may be solved and yields  $\\gamma=6\\pi\\eta a$ where $a$ is the radius of the sphere and here $\\eta$ is\nthe fluid viscosity. This gives\n\n$$\nD=\\frac{6\\pi\\eta a}{kT}\n$$\nwhich is the **Stokes-Einstein** formula for the diffusion constant of a colloidal particle.\n\n\n### External Forces and Mobility\n\nNow consider a charged particle with charge $q$ under an external electric field $E$. The Langevin equation becomes:\n\n$$\nm \\dot{v} = -\\gamma v + qE\n$$\n\nAt long times, the particle reaches a steady drift velocity:\n\n$$\n\\langle v \\rangle = \\frac{qE}{\\gamma} = \\frac{qED}{k_B T}\n$$\n\nDefining the mobility $\\mu$ by $\\langle v \\rangle = \\mu qE$, we get the **Nernst-Einstein relation**:\n\n$$\n\\mu = \\frac{D}{k_B T}\n$$\n\nThis relation connects the response of a system to an external perturbation (mobility) with its internal fluctuations (diffusivity).\n\n\n### Molecular Dynamics simulation of Brownian motion for a colloid particle in a liquid suspension\n\n{{< video Movies/brownian_colloid.mp4 >}}\n\n\n```{python}\n#| echo: true\n#| eval: false\n#| code-fold: true\n#| code-summary: \"Show python code\"\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom numba import njit\n\n# Parameters\nn_fluid = 300\nbox_size = 20.0\nn_steps = 10000\nsigma_f = 1.0\nsigma_c = 10.0\nepsilon = 0.05\nmass_f = 1.0\nmass_c = 2.0\ndt = 1e-5\ndt_e = 1e-5\n\n# Echo the parameter values\nprint(\"Simulation Parameters:\")\nprint(f\"n_fluid = {n_fluid}\")\nprint(f\"box_size = {box_size}\")\nprint(f\"n_steps = {n_steps}\")\nprint(f\"sigma_f = {sigma_f}\")\nprint(f\"sigma_c = {sigma_c}\")\nprint(f\"epsilon = {epsilon}\")\nprint(f\"mass_f = {mass_f}\")\nprint(f\"mass_c = {mass_c}\")\nprint(f\"dt = {dt}\")\n \n # Derived quantities\n\nsigma_f6 = sigma_f ** 6\nsigma_f12 = sigma_f **12\nsigma_cf = 0.5 * (sigma_f + sigma_c)\nsigma_cf6 = sigma_cf ** 6\nsigma_cf12 = sigma_cf ** 12\n\nnp.random.seed(42)\n\n# Safe initialization to avoid overlaps with colloid and other fluid particles\ndef initialize_fluid_positions(n_fluid, box_size, sigma_f, sigma_c, colloid_pos, min_dist_factor=0.85):\n    min_dist_ff = min_dist_factor * sigma_f\n    min_dist_cf = min_dist_factor * 0.5 * (sigma_f + sigma_c)\n    positions = []\n    max_attempts = 20000\n\n    for _ in range(n_fluid):\n        for attempt in range(max_attempts):\n            trial = np.random.rand(2) * box_size\n            too_close = False\n\n            # Check distance to colloid center\n            if np.linalg.norm(trial - colloid_pos[0]) < min_dist_cf:\n                too_close = True\n\n            # Check distances to already placed fluid particles\n            for existing in positions:\n                if np.linalg.norm(trial - existing) < min_dist_ff:\n                    too_close = True\n                    break\n\n            if not too_close:\n                positions.append(trial)\n                break\n        else:\n            raise RuntimeError(\"Failed to place a fluid particle without overlap after many attempts.\")\n    \n    return np.array(positions)\n\ncolloid_pos = np.array([[box_size / 2, box_size / 2]])\nfluid_pos = initialize_fluid_positions(n_fluid, box_size, sigma_f, sigma_c, colloid_pos)\nfluid_vel = (np.random.rand(n_fluid, 2) - 0.5)\ncolloid_vel = np.zeros((1, 2))\n\n@njit\ndef compute_forces_numba(fluid_pos, colloid_pos, sigma_cf6, sigma_cf12, sigma_f6, sigma_f12, epsilon, box_size, n_fluid):\n    forces_f = np.zeros_like(fluid_pos)\n    force_c = np.zeros_like(colloid_pos)\n\n    for i in range(n_fluid):\n        # Fluid-colloid interaction\n        rij = fluid_pos[i] - colloid_pos[0]\n        rij -= box_size * np.round(rij / box_size)\n        dist2 = np.dot(rij, rij)\n        if dist2 < (2.5 ** 2) * ((sigma_cf6 ** (1/6)) ** 2) and dist2 > 1e-10:\n            r2 = dist2\n            r6 = r2 ** 3\n            r12 = r6 ** 2\n            fmag = 48 * epsilon * ((sigma_cf12 / r12) - 0.5 * (sigma_cf6 / r6)) / r2\n            fvec = fmag * rij\n            forces_f[i] += fvec\n            force_c[0] -= fvec\n\n        for j in range(i + 1, n_fluid):\n            rij = fluid_pos[i] - fluid_pos[j]\n            rij -= box_size * np.round(rij / box_size)\n            dist2 = np.dot(rij, rij)\n            if dist2 < (2.5 ** 2) * ((sigma_f6 ** (1/6)) ** 2) and dist2 > 1e-10:\n                r2 = dist2\n                r6 = r2 ** 3\n                r12 = r6 ** 2\n                fmag = 48 * epsilon * ((sigma_f12 / r12) - 0.5 * (sigma_f6 / r6)) / r2\n                fvec = fmag * rij\n                forces_f[i] += fvec\n                forces_f[j] -= fvec\n\n    return forces_f, force_c\n\n    fluid_history = []\ncolloid_history = []\nforces_f, force_c = compute_forces_numba(fluid_pos, colloid_pos, sigma_cf6, sigma_cf12, sigma_f6, sigma_f12, epsilon, box_size, n_fluid)\n\nn_equilibration = 2000  # Number of steps to equilibrate before tracking\n\n# Equilibration phase (no history recorded)\n\nfor step in range(n_equilibration):\n    fluid_pos += fluid_vel * dt_e + 0.5 * forces_f / mass_f * dt**2\n    colloid_pos += colloid_vel * dt_e + 0.5 * force_c / mass_c * dt**2\n    fluid_pos %= box_size\n    colloid_pos %= box_size\n    new_forces_f, new_force_c = compute_forces_numba(fluid_pos, colloid_pos, sigma_cf6, sigma_cf12, sigma_f6, sigma_f12, epsilon, box_size, n_fluid)\n    fluid_vel += 0.5 * (forces_f + new_forces_f) / mass_f * dt_e\n    colloid_vel += 0.5 * (force_c + new_force_c) / mass_c * dt_e\n    forces_f = new_forces_f\n    force_c = new_force_c\n    # if step < 10:  # Log only the first few steps\n    #     force_mag = np.linalg.norm(force_c[0])\n    #     print(f\"Step {step:3d} | Colloid Pos: {colloid_pos[0]} | Vel: {colloid_vel[0]} | |F|: {force_mag:.4e}\")\n\n# Production phase (history recorded)\n\nfor step in range(n_steps):\n    fluid_pos += fluid_vel * dt + 0.5 * forces_f / mass_f * dt**2\n    colloid_pos += colloid_vel * dt + 0.5 * force_c / mass_c * dt**2\n    fluid_pos %= box_size\n    colloid_pos %= box_size\n    new_forces_f, new_force_c = compute_forces_numba(fluid_pos, colloid_pos, sigma_cf6, sigma_cf12, sigma_f6, sigma_f12, epsilon, box_size, n_fluid)\n    fluid_vel += 0.5 * (forces_f + new_forces_f) / mass_f * dt\n    colloid_vel += 0.5 * (force_c + new_force_c) / mass_c * dt\n    forces_f = new_forces_f\n    force_c = new_force_c\n    if step % 10 == 0:\n        fluid_history.append(fluid_pos.copy())\n        colloid_history.append(colloid_pos.copy())\n\nfig, ax = plt.subplots()\n# Calculate figure and plot scale parameters\nfig_width_inch = fig.get_size_inches()[0]\ndpi = fig.dpi\naxis_length_pt = fig_width_inch * dpi\nmarker_scale = 0.1  # Scale factor for visibility\nfluid_marker_size = (marker_scale * axis_length_pt / box_size) ** 2\ncolloid_marker_size = 0.7*(marker_scale * sigma_c / sigma_f * axis_length_pt / box_size) ** 2\nfluid_scatter = ax.scatter([], [], s=fluid_marker_size, c='blue')\ncolloid_scatter = ax.scatter([], [], s=colloid_marker_size, c='red')\ntrajectory, = ax.plot([], [], 'r--', linewidth=1, alpha=0.5)\nax.set_xlim(0, box_size)\nax.set_ylim(0, box_size)\nax.set_xticks([])\nax.set_yticks([])\nax.set_xticklabels([])\nax.set_yticklabels([])\nax.set_aspect('equal')\ncolloid_traj = []\n\ndef init():\n    empty_offsets = np.empty((0, 2))\n    fluid_scatter.set_offsets(empty_offsets)\n    colloid_scatter.set_offsets(empty_offsets)\n    trajectory.set_data([], [])\n    return fluid_scatter, colloid_scatter, trajectory\n\ndef update(frame):\n    fluid_scatter.set_offsets(fluid_history[frame])\n    colloid_scatter.set_offsets(colloid_history[frame])\n    colloid_traj.append(colloid_history[frame][0])\n    traj_array = np.array(colloid_traj)\n    trajectory.set_data(traj_array[:, 0], traj_array[:, 1])\n    return fluid_scatter, colloid_scatter, trajectory\n\nani = animation.FuncAnimation(fig, update, frames=len(fluid_history), init_func=init, blit=True, interval=20)\nani.save(\"brownian_colloid.mp4\", writer=\"ffmpeg\", fps=30)\nprint(\"Simulation complete. Video saved as 'brownian_colloid.mp4'.\")\n\n\n```","srcMarkdownNoYaml":""},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/ft14968/Repos/course-disordered-matter/quarto/_extensions/r-wasm/live/live.lua"],"toc":true,"output-file":"Brownian-and-Langevin-dynamics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"resources":["**/*.pdb"],"theme":"cosmo","grid":{"sidebar-width":"305px"},"mainfont":"sans-serif","fontsize":"15px","pyodide":{"cell-options":{"autorun":true}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}